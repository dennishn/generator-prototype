/*
 * Mixins and functions libary
 *
 * @author Full Name of Author <author@email.com>
 * @version yyy-mm-dd (Date of latest edit)
 */



// /*******************************************/
// $_HELPERS
// /*******************************************/
// Mixins
//  Usage:
//    .foo {
//        @include bar();
//        ...
//    }

// Micro Clearfix
@mixin clearfix() {
  *zoom:1;
  &:before, &:after { content: " "; display: table; }
  &:after { clear: both; }
}

// Facebook App dimensions
@mixin facebook-app() {
    width:100%;
    position:relative;
    @media #{$media-facebook-desktop} {
        width:810px;
        margin:0 auto;
    }
}

// Font-face
// Read: http://coding.smashingmagazine.com/2013/02/14/setting-weights-and-styles-at-font-face-declaration/
// Make sure to define the proper font name, and dont use font-weight / font-style
//  Usage:
//    _typography.scss:
//        @include font-face('Gill-Sans-Regular', 'Gill-Sans-MT-Pro');
//        -and/or-
//        @include font-face('Gill-Sans-Light', 'Gill-Sans-MT-Pro-Light');
//        -and/or-
//        @include font-face('Gill-Sans-Italic', 'Gill-Sans-MT-Pro-Italic');
//        -and/or-
//        @include font-face('Gill-Sans-Bold', 'Gill-Sans-MT-Pro-Bold');
//        -and/or-
//        @include font-face('Gill-Sans-Bold-Italic', 'Gill-Sans-MT-Pro-Bold-Italic');
//        -etc-
//
//        h1 {
//            font-family: Gill-Sans-Bold-Italic;
//            -etc-
//        }

@mixin font-face($font-family, $font-filename) {
    @font-face {
        font-family: '#{$font-family}';
        src: url(('../fonts/#{$font-filename}.eot'));
        src: url(('../fonts/#{$font-filename}.eot?#iefix')) format('embedded-opentype'),
        url(('../fonts/#{$font-filename}.woff')) format('woff'),
        url(('../fonts/#{$font-filename}.ttf')) format('truetype'),
        url(('../fonts/#{$font-filename}.svg##{$font-family}')) format('svg');
        font-weight: normal;
        font-style: normal;
    }
}

// Functions

// Mixin for creating arrows

@mixin arrow($direction, $color, $size){
    display: block;
    height: 0;
    width: 0;

    @if $direction == 'top' {
        border-left: $size solid transparent;
      border-right: $size solid transparent;
      border-bottom: $size solid $color;
    } @else if $direction == 'right' {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
      border-left: $size solid $color;
    } @else if $direction == 'bottom' {
        border-top: $size solid $color;
        border-right: $size solid transparent;
        border-left: $size solid transparent;
    } @else if $direction == 'left' {
        border-top: $size solid transparent;
      border-right: $size solid $color;
      border-bottom: $size solid transparent;
    } @else if $direction == 'top-left' {
        border-top: $size solid $color;
        border-right: $size solid transparent;
    } @else if $direction == 'top-right' {
        border-top: $size solid $color;
        border-left: $size solid transparent;
    } @else if $direction == 'bottom-left' {
        border-bottom: $size solid $color;
        border-right: $size solid transparent;
    } @else if $direction == 'bottom-right' {
        border-bottom: $size solid $color;
        border-left: $size solid transparent;
    }
}

@mixin linear-gradient($fromColor, $toColor) {
  background-color: $toColor; /* Fallback Color */
  background-image: -webkit-gradient(linear, left top, left bottom, from($fromColor), to($toColor)); /* Saf4+, Chrome */
  background-image: -webkit-linear-gradient(top, $fromColor, $toColor); /* Chrome 10+, Saf5.1+, iOS 5+ */
  background-image:    -moz-linear-gradient(top, $fromColor, $toColor); /* FF3.6 */
  background-image:     -ms-linear-gradient(top, $fromColor, $toColor); /* IE10 */
  background-image:      -o-linear-gradient(top, $fromColor, $toColor); /* Opera 11.10+ */
  background-image:         linear-gradient(top, $fromColor, $toColor);
  filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,StartColorStr='#{$fromColor}', EndColorStr='#{$toColor}');
}

@mixin reflected-gradient($outerColor, $innerColor) {
  background-color: $outerColor; /* Fallback Color */
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, $outerColor), color-stop(50%, $innerColor), color-stop(100%, $outerColor)); /* Saf4+, Chrome */
  background-image: -webkit-linear-gradient(top, $outerColor 0%, $innerColor 50%, $outerColor 100%); /* Chrome 10+, Saf5.1+, iOS 5+ */
  background-image:    -moz-linear-gradient(top, $outerColor 0%, $innerColor 50%, $outerColor 100%); /* FF3.6 */
  background-image:     -ms-linear-gradient(top, $outerColor 0%, $innerColor 50%, $outerColor 100%); /* IE10 */
  background-image:      -o-linear-gradient(top, $outerColor 0%, $innerColor 50%, $outerColor 100%); /* Opera 11.10+ */
  background-image:         linear-gradient(to bottom, $outerColor 0%, $innerColor 50%, $outerColor 100%);
  filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,StartColorStr='#{$outerColor}', EndColorStr='#{$innerColor}');
}



